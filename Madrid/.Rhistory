plot(as.undirected(g4),
vertex.size = 6,
vertex.label = "",
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g4)$color,
layout = layout_nicely)
plot(as.undirected(g4),
vertex.size = 8,
vertex.label = "",
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g4)$color,
layout = layout_nicely)
simplify(g4)
g5<-simplify(g4)
plot(as.undirected(g5),
vertex.size = 8,
vertex.label = "",
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g4)$color,
layout = layout_nicely)
g4<-simplify(g4)
plot(g4,
vertex.size = 8,
vertex.label = "",
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g4)$color,
layout = layout_nicely)
plot(g4,
vertex.size = 8,
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g4)$color,
layout = layout_nicely)
V(g4)$position
table(V(g4)$position)
get.vertex.attribute(g4)
mad_attr$Pos
g5 <- set.vertex.attribute(graph = g4, name = "position", index = V(g4), value = mad_attr$Pos)
get.vertex.attribute(g5)
mad_attr$Pos
me.bern <- ergm(net ~ edges)
net_madrid <- asNetwork(g5)
me.bern <- ergm(net ~ edges)
me.bern <- ergm(net_madrid ~ edges)
summary(me.bern)
me.bern.sim <- simulate(me.bern)
par(mfrow=c(1,2)) # This command enables side-by-side comparison.
plot(net_madrid, main="Observed")
plot(me.bern.sim, main="Simulated")
par(mfrow=c(1,1)) # Don't forget to switch it back!
simulate(me.bern, nsim=100)
me.bern.gof <- gof(me.bern,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,2))
plot(me.bern.gof) # Add the argument "plotlogodds=T" here to rescale
par(mfrow=c(1,1)) # Don't forget to switch it back!
par(mfrow=c(2,2))
plot(net_madrid)
plot(me.bern.gof)
par(mfrow=c(1,1)) # Don't forget to switch it back!
par(mfrow=c(2,2))
plot(net_madrid)
plot(me.bern.gof)
par(mfrow=c(1,1)) # Don't forget to switch it back!
par(mfrow=c(2,2))
plot(net_madrid)
par(mfrow=c(1,1)) # Don't forget to switch it back!
mad_attr$Op1Role1
mad_attr$PosII
mad_attr$PosI
mad_attr$Pos
length(mad_attr$Pos)
table(mad_attr$Pos)
mad_attr$ever_arrested
get.vertex.attribute(g5)
get.vertex.attribute(g5)$POB
mad_attr$POB
get.vertex.attribute(g5)$position
mad_attr$Pos
as.numeric(mad_attr$Pos)
table(as.numeric(mad_attr$Pos))
table(mad_attr$Pos)
as.numeric(mad_attr$Pos)-4
g5 <- set.vertex.attribute(graph = g4, name = "position", index = V(g4), value = as.numeric(mad_attr$Pos)-4)
plot(5)
plot(g5)
get.vertex.attribute(g5)
table(mad_attr$Pos)
table(get.vertex.attribute(g5)$position)
V(g5)$position <- ifelse(V(g5)$position == 1, 2, ifelse(V(g5)$position == 2, 3, ifelse(V(g5)$position == 5, 4, ifelse(V(g5)$position == 6, 1, ifelse(V(g5)$position == 7, 1, ifelse(V(g5)$position == 8, 1, ifelse(V(g5)$position == 9, 5, 10)))))))
table(get.vertex.attribute(g5)$position)
V(g5)$color_position <- ifelse(V(g5)$position == 1, rainbow(5)[1], ifelse(V(g5)$position == 2, rainbow(5)[2], ifelse(V(g5)$position == 3, rainbow(5)[3], ifelse(V(g5)$position == 4, rainbow(5)[4], ifelse(V(g5)$position == 5, rainbow(5)[5], rainbow(6)[6]))
)
)
)
plot(g5)
plot(g5,
vertex.size = 8,
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g5)$position,
layout = layout_nicely)
table(get.vertex.attribute(g5)$POB)
get.vertex.attribute(g5)
table(get.vertex.attribute(g5)$POB)
table(get.vertex.attribute(g5)$position)
V(g5)$color_pob <- ifelse(V(g5)$POB == 3, rainbow(8)[1], ifelse(V(g5)$POB == 41, rainbow(8)[2], ifelse(V(g5)$POB == 65, rainbow(8)[3], ifelse(V(g5)$POB == 68, rainbow(8)[4], ifelse(V(g5)$POB == 86, rainbow(8)[5], ifelse(V(g5)$POB == 119, rainbow(8)[6], ifelse(V(g5)$POB == 126, rainbow(8)[7], ifelse(V(g5)$POB == 132, rainbow(8)[8], rainbow(9)[9]))))))))
plot(g5,
vertex.size = 8,
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g5)$POB,
layout = layout_nicely)
plot(g5,
vertex.size = 8,
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g5)$color_POB,
layout = layout_nicely)
plot(g5,
vertex.size = 8,
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g5)$color_pob,
layout = layout_nicely)
plot(g5,
vertex.size = 8,
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g5)$POB,
layout = layout_nicely)
net_madrid <- asNetwork(g5)
me.mark1 <- ergm(net_madrid ~ edges + triangle, verbose=T) # Add in verbose option to watch it work!
summary(me.mark1)
me.mark1.gof <- gof(me.mark1,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,4))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
mad.2 <- ergm(net_madrid ~ edges + gwesp(0.24,fixed=T), verbose = T)
mcmc.diagnostics(mad.2)
mad.2 <- ergm(net_madrid ~ edges + gwesp(0.24,fixed=T) + nodematch('POB'), verbose = T)
mcmc.diagnostics(mad.2)
mad.2.gof <- gof(mad.2, GOF = ~ degree + distance + triadcensus + espartners)
mad.sim1 <- simulate(mad.2)
par(mfrow=c(2,2))
plot(mad.2.gof)
mad.sim1 <- sim_nets(mad.2)
mad.sim1 <- simulate(mad.2)
par(mfrow=c(1,2))
plot(net_madrid, vertex.cex=.5, vertex.col="POB", main="Observed")
plot(mad.sim1, vertex.cex=.5, vertex.col="POB", main="Simulated")
summary(mad.2)
mad.2 <- ergm(net_madrid ~ edges + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('position'), verbose = T)
mcmc.diagnostics(mad.2)
summary(mad.2)
mad.2 <- ergm(net_madrid ~ edges + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations'), verbose = T)
summary(mad.2)
mcmc.diagnostics(mad.2)
mad.2.gof <- gof(mad.2, GOF = ~ degree + distance + triadcensus + espartners)
par(mfrow=c(2,2))
plot(mad.2.gof)
mad.sim1 <- simulate(mad.2)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(mad.2.gof)
plt(g5)
plot(g5)
plot(g4)
plot(g5,
vertex.size = 8,
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = V(g5)$color_pob,
layout = layout_nicely)
par(mfrow=c(2,4))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
me.mark1 <- ergm(net_madrid ~ edges + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations'), verbose = T)
me.bern <- ergm(net_madrid ~ edges)
summary(me.mark1)
me.mark1.gof <- gof(me.mark1,  GOF = ~ degree + triadcensus + espartners - model)
me.bern.gof <- gof(me.bern,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,4))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
?gwesp
par(mfrow=c(2,4))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
me.mark1.gof <- gof(me.mark1,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,4))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
summary(me.mark1)
mad.sim1 <- simulate(me.mark1)
par(mfrow=c(1,2))
plot(g5, vertex.cex=2, vertex.col="POB", main="Observed")
plot(mad.sim1, vertex.cex=2, vertex.col="POB", main="Simulated")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(net_madrid, vertex.cex=2, vertex.col="POB", main="Observed")
plot(mad.sim1, vertex.cex=2, vertex.col="POB", main="Simulated")
par(mfrow=c(1,1))
summary(me.mark1)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodecov('POB') + nodecov('number_operations') + nodecov('ever_arrested') + nodematch('POB') + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
summary(me.mark1)
me.mark1.gof <- gof(me.mark1,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,4))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
me.mark1.gof <- gof(me.mark1,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,4))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(me.mark1.gof)
par(mfrow=c(1,1))
?gif
?gof
summary(me.mark1)
centrality_plot <- function(g, centrality = NULL,
default.color = rgb(0.3,0.5,0.9),
name = "",
...){
# The braces {} hold the part of the function that tells it what to do
# with the data and arguments the user specifies.
# This can include if(){}else{} statements in case the function should
# act differently for different patterns of data or arguments.
# Let's say that if we don't specify the centrality the function should
# 'degrade gracefully' into just a basic plotting function with
# reasonably sized nodes and the default blue colour.
if(is.null(centrality)) {
vertex.size.centrality <- 10
color <- default.color
}
# But then, if a centrality algorithm is specified,
# we want to collect this information and use it.
else {
vertex.size.centrality <- 10 * centrality /max(centrality)
central.actor <- which.max(centrality)
color <- rep(default.color, length(centrality))
color[central.actor] <- rgb(1,0,0)
}
# With this information, we want the function to plot our network
plot(g,
edge.arrow.size = 0,
vertex.color = color,
vertex.label.color = "white",
vertex.label = "",
vertex.size = vertex.size.centrality,
main = name,
...)
}
centrality_plot(g5, igraph::degree(g5))
centrality_plot(g5, igraph::closeness(g5))
centrality_plot(g5, igraph::betweenness(g5))
centrality_plot(g5, igraph::closeness(g5))
closeness(g5=)
closeness(g5)
max(closeness(g5))
which(max(closeness(g5)))
which(closeness(g5) == max(closeness(g5)))
mad_attr[mad_attr$ID==3132,]
install.packages("posterdown")
?plot
plot(net_madrid)
plot(net_madrid, vertex.label = Name, main="Observed")
plot(net_madrid, main="Observed")
plot(net_madrid, vertex.label = "", main="Observed")
plot(net_madrid,
vertex.size = 1,
vertex.label = "",
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = "darkblue",
edge.color = "black",
layout = layout_nicely)
plot(net_madrid,
vertex.size = 1,
edge.width = 2,
edge.arrow.size = 0.5,
vertex.color = "darkblue",
edge.color = "black",
layout = layout_nicely)
plot(net_madrid, vertex_attr_names)
plot(net_madrid, label = "")
plot(net_madrid, label = "1")
plot(net_madrid, label = get.vertex.attribute(net))
plot(net_madrid, label = get.vertex.attribute(g5))
plot(net_madrid, label = get.vertex.attribute(g5)$POB)
plot(net_madrid, label
)
save.image("~/Documents/Education/IHEID/RI-SP093/ZZZ_Poster/RData.RData")
?nodecov
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch(POB) + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB) + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + nodecov(POB) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
test.bern <- ergm(net_madrid ~ edges + nodecov(POB))
mad_nodes$Death_Date
!is.null(mad_nodes$Death_Date)
which(!is.null(mad_nodes$Death_Date))
mad_attr$suicide = c(0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
mad_attr$suicide = c(0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
plot(net_madrid, vertex.cex=2, vertex.col="suicide", main="Observed")
g6 <- set.vertex.attribute(graph = g5, name = "suicide", index = V(g5), value = mad_attr$suicide)
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$suicide, layout = layout_nicely)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + nodecov(POB) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
net_madrid <- asNetwork(g6)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + nodecov(POB) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
get.vertex.attribute(net_madrid)
get.vertex.attribute(g6)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('ever_arrested'), verbose = T)
summary(me.mark1)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('suicide'), verbose = T)
summary(me.mark1)
me.mark1.gof <- gof(me.mark1,  GOF = ~ degree + triadcensus + espartners - model)
setwd("~/Documents/Education/IHEID/RI-SP093/Report_02")
setwd("~/Documents/Education/IHEID/RI-SP093/ZZZ_Poster")
summary(me.mark1)
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE, tidy.opts=list(width.cutoff=60))
#Import igraph library and the 2 network datasets
library(igraph)
library(haven)
library(ergm)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('suicide'), verbose = T)
summary(me.mark1)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodecov('number_operations') + nodematch('suicide'), verbose = T)
summary(me.mark1)
V(g6)
V(g6)$number_operations
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$numer_operations, layout = layout_nicely)
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$color_numoperations, layout = layout_nicely)
get.vertex.attribute(g6)
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$suicide, layout = layout_nicely)
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$position, layout = layout_nicely)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('position') + nodematch('suicide'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('position'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('suicide'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('suicide'), verbose = T)
summary(me.mark1)
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$position, layout = layout_nicely)
get.vertex.attribute(g6)
mcmc.diagnostics(me.mark1)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('POB') + nodecov('number_operations') + nodematch('suicide'), verbose = T)
summary(me.mark1)
mcmc.diagnostics(me.mark1)
mad.part2 <- ergm(net_madrid ~ edges + gwesp(0.25,fixed=T) + gwdegree(0.25,fixed=T) + nodematch('POB') +	nodematch('suicide'),control = control.ergm(MCMC.samplesize=50000, MCMC.interval=1000),verbose=T)
mad.part2 <- ergm(net_madrid ~ edges + gwesp(0.25,fixed=T) + gwdegree(0.25,fixed=T) + nodematch('POB') + nodecov('number_operations') +	nodematch('suicide'),control = control.ergm(MCMC.samplesize=50000, MCMC.interval=1000),verbose=T)
mcmc.diagnostics(mad.part2)
network.density(net_madrid)
plogis(ceof(me.bern)[[1]])
me.bern
plogis(coef(me.bern)[[1]])
plogis(coef(mad.part2)[[1]])
summary(mad.part2)
coef(mad.part2)
coef(mad.part2)[[|]]
coef(mad.part2)[[1]]
plogis(coef(mad.part2)[[6]])
plogis(coef(mad.part2)[[4]])
plogis(coef(mad.part2)[[4]]+coef(mad.part2)[[6]])
devtools::install_github("bbucior/drposter", dep=FALSE)
install.packages("devtools")
devtools::install_github("bbucior/drposter", dep=FALSE)
install.packages("devtools")
devtools::install_github("bbucior/drposter", dep=FALSE)
setwd("~/Documents/Education/IHEID/RI-SP093/ZZZ_Poster")
297/420
(297/420)*2000
me.bern <- ergm(net_madrid ~ edges)
me.bern.sim <- simulate(me.bern)
par(mfrow=c(1,2)) # This command enables side-by-side comparison.
plot(net_madrid, main="Observed")
plot(me.bern.sim, main="Simulated")
par(mfrow=c(1,1)) # Don't forget to switch it back!
simulate(me.bern, nsim=100)
me.bern.gof <- gof(me.bern,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,2))
plot(me.bern.gof) # Add the argument "plotlogodds=T" here to rescale
par(mfrow=c(1,1)) # Don't forget to switch it back!
summary(me.mark1)
summary(mad.part2)
summary(me.mark1)
summary(me.mark1)
summary(mad.part2)
summary(me.mark1)
me.mark1.gof <- gof(me.mark1,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,2))
plot(me.mark1.gof) # Add the argument "plotlogodds=T" here to rescale
par(mfrow=c(1,1)) # Don't forget to switch it back!
par(mfrow=c(2,2))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
par(mfrow=c(2,4))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
setwd("~/Documents/Education/IHEID/RI-SP093/ZZZ_Poster/Data/Attack_Cells/AlQaeda")
aq_edges <- read.csv("~/Documents/Education/IHEID/RI-SP093/ZZZ_Poster/Data/Attack_Cells/AlQaeda/aq_edges.csv", header=FALSE)
View(aq_edges)
g_aq <- graph.data.frame(aq_edges, directed=FALSE)
plot(asNetwork(g_aq))
setwd("~/Documents/Education/IHEID/RI-SP093/ZZZ_Poster/Data/Attack_Cells/Madrid")
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$position, layout = layout_nicely)
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$position, layout = layout_nicely)
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$position, layout = layout_nicely, main = "Figure 2: Network by role")
legend("topleft")
g6$position
get.vertex.attribute(g6)$position
unique(get.vertex.attribute(g6)$position)
legend("topleft", legend = unique(get.vertex.attribute(g6)$position))
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$position, layout = layout_nicely, main = "Figure 2: Network by role")
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$color_position, layout = layout_nicely, main = "Figure 2: Network by role")
unique(get.vertex.attribute(g6)$position)
unique(get.vertex.attribute(g6)$color_position)
legend("topleft", legend=c("Leadership role", "Logistical role", "Religious leader", "General subordinate", "Military leader"), col = c("#FF0000FF", "#0066FFFF", "#00FF66FF", "#CC00FFFF", "#CCFF00FF"))
legend("topleft", legend=c("Leadership role", "Logistical role", "Religious leader", "General subordinate", "Military leader"), col = par("#FF0000FF", "#0066FFFF", "#00FF66FF", "#CC00FFFF", "#CCFF00FF"))
legend("topleft", legend=c("Leadership role", "Logistical role", "Religious leader", "General subordinate", "Military leader"), col = rainbow(5)[1:5])
legend("topleft", legend=c("Leadership role", "Logistical role", "Religious leader", "General subordinate", "Military leader"), col = V(g6)$color_position)
?legend
legend("topleft", legend=c("Leadership role", "Logistical role", "Religious leader", "General subordinate", "Military leader"), col = rainbow(5))
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$color_position, layout = layout_nicely, main = "Figure 2: Network by role")
legend("topleft", legend=c("Leadership role", "Logistical role", "Religious leader", "General subordinate", "Military leader"), col = rainbow(5))
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$color_position, layout = layout_nicely, main = "Figure 2: Network by role")
legend("topleft", legend=c("Leadership role", "Logistical role", "Religious leader", "General subordinate", "Military leader"), fill=rainbow(5))
legend("topleft", legend=c("Leadership role", "Military leader", "Logistical role", "Religious leader", "General subordinate"), fill=rainbow(5))
legend("topleft", legend=c("Leadership role", "Military leader", "Religious leader", "Logistical role", "General subordinate"), fill=rainbow(5))
legend("topleft", legend=c("Leadership role", "Military committee", "Religious committee", "Logistical role", "General subordinate"), fill=rainbow(5))
get.vertex.attribute(g6)
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$color_arrest, layout = layout_nicely, main = "Figure 3: Network by arrest status prior to attack")
legend("topleft", legend=c("YES", "NO"), fill=rainbow(2))
mad_attr$ever_arrested
table(mad_attr$ever_arrested)
legend("topleft", legend=c("NO", "YES"), fill=rainbow(2))
V(g6)$color_suicide <- ifelse(V(g6)$suicide == 0, rainbow(2)[1], ifelse(V(g6)$suicide == 1, rainbow(2)[2], rainbow(3)))
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$color_suicide, layout = layout_nicely, main = "Figure 4: Network by willingness to die for belief")
legend("topleft", legend=c("NO", "YES"), fill=rainbow(2))
plot(g6, vertex.size = 8, vertex.label = "", edge.width = 2, vertex.color = V(g6)$color_suicide, layout = layout_nicely, main = "Figure 4: Network by willingness to die for belief")
legend("topleft", legend=c("NO", "YES"), fill=rainbow(2))
centrality_plot(g6, igraph::degree(g6))
plot(g6, vertex.size = degree(g6), vertex.label = "", edge.width = 2, vertex.color = V(g6)$color_suicide, layout = layout_nicely, main = "Figure 1: Network by degree")
plot(g6, vertex.size = degree(g6), vertex.label = "", edge.width = 2, layout = layout_nicely, main = "Figure 1: Network by degree")
plot(g6, vertex.size = degree(g6)/2, vertex.label = "", edge.width = 2, layout = layout_nicely, main = "Figure 1: Network by degree")
plot(g6, vertex.size = degree(g6)/1.5, vertex.label = "", edge.width = 2, layout = layout_nicely, main = "Figure 1: Network by degree")
delete.vertex.attribute(g6)$color
delete_vertex_attr(g6)$color
delete_vertex_attr(graph = g6, name = color
)
get.vertex.attribute(g6)
delete_vertex_attr(g6, "color")
get.vertex.attribute(g6)
g7<- delete_vertex_attr(g6, "color")
plot(g7, vertex.size = degree(g6)/1.5, vertex.label = "", edge.width = 2, layout = layout_nicely, main = "Figure 1: Network by degree")
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('suicide') + nodematch('ever_arrested') + nodematch('position'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.24,fixed=T) + nodematch('suicide') , verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('suicide') + nodematch('ever_arrested') + nodematch('position'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('suicide'), verbose = T)
mcmc.diagnostics(me.mark1)
summary(me.mark1)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('POB') + nodematch('suicide'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('POB') + nodematch('position') + nodematch('suicide'), verbose = T)
get.vertex.attribute(g6)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('POB') + nodematch('ever_arrested') + nodematch('suicide'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + nodematch('POB') + nodematch('ever_arrested') + nodematch('suicide'), verbose = T)
mcmc.diagnostics(me.mark1)
summary(me.mark1)
me.mark1 <- ergm(net_madrid ~ edges + triangle + nodematch('POB') + nodematch('ever_arrested') + nodematch('suicide'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('suicide'), verbose = T)
me.mark1 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T), verbose = T)
net_madrid <- asNetwork(g7)
me.bern <- ergm(net_madrid ~ edges)
me.mark1 <- ergm(net_madrid ~ edges + triangle, verbose=T) # Add in verbose option to watch it work!
mad.bla2 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('suicide'), verbose = T)
mad.bla2 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('POB') + nodematch('ever_arrested') + nodematch('suicide'), verbose = T)
mad.bla2 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('POB') + nodematch('position') + nodematch('suicide'), verbose = T)
get.vertex.attribute(g7)
mad.bla2 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('suicide'), verbose = T)
summary(mad.bla2)
mcmc.diagnostics(mad.bla2)
get.vertex.attribute(g7)
mad.bla2 <- ergm(net_madrid ~ edges + gwdegree(0.25,fixed=T) + gwesp(0.25,fixed=T) + nodematch('POB') + nodematch('number_operations') + nodematch('suicide') + nodematch('ever_arrested') + nodematch("position"), verbose = T)
mcmc.diagnostics(mad.bla2)
par(mfrow=c(1,1))
summary(mad.bla2)
mcmc.diagnostics(mad.bla2)
summary(mad.bla2)
par(mfrow=c(4,2))
mcmc.diagnostics(mad.bla2)
me.mark1.gof <- gof(mad.bla2,  GOF = ~ degree + triadcensus + espartners - model)
par(mfrow=c(2,2))
plot(me.bern.gof)
plot(me.mark1.gof)
par(mfrow=c(1,1))
get.vertex.attribute(g7)
get.vertex.attribute(g7)$POB
unique(get.vertex.attribute(g7)$POB)
mcmc.diagnostics(mad.bla2)
summary(mad.bla2)
